#include <iostream>

#include <windows.h>

#include <conio.h>

using namespace std;

//matrik berisi nilai unutuk ditampilkan sebagai map/peta
char Map[10][10] = {
  "#########",
  "###  !###",
  "#### ####",
  "##      #",
  "## ###  #",
  "#  #    #",
  "####    #",
  "#@      #",
  "#########"
};

//Mengatur speed/perubahan respon posisi hero terhadap input keyboard (arah)
int Gamespeed = 100;
int Level = 0;
int * levelPointer = & Level;
bool stopgame = false;

//Function yang akan dijalankan ketika tombol arah atas ditekan
void up(int y, int x) {

  int y2 = (y - 1);
  switch (Map[y2][x]) {
  case ' ': {
    Map[y][x] = ' ';
    y -= 1;
    Map[y2][x] = '@';
  }
  break;
  case '!': {
    * levelPointer = 1;
  }
  break;
  }
}

//Function yang akan dijalankan ketika tombol arah bawah ditekan
void down(int y, int x) {
  int y2 = (y + 1);
  switch (Map[y2][x]) {
  case ' ': {
    Map[y][x] = ' ';
    y += 1;
    Map[y2][x] = '@';
  }
  break;
  case '!': {
    * levelPointer = 1;
  }
  break;
  }
}

//Function yang akan dijalankan ketika tombol arah kanan ditekan
void right(int y, int x) {
  int x2 = (x + 1);
  switch (Map[y][x2]) {
  case ' ': {
    Map[y][x] = ' ';
    x += 1;
    Map[y][x2] = '@';
  }
  break;
  case '!': {
    * levelPointer = 1;
  }
  break;
  }
}

//Function yang akan dijalankan ketika tombol arah kiri ditekan
void left(int y, int x) {
  int x2 = (x - 1);
  switch (Map[y][x2]) {
  case ' ': {
    Map[y][x] = ' ';
    x -= 1;
    Map[y][x2] = '@';
  }
  break;
  case '!': {
    * levelPointer = 1;
  }
  break;
  }
}
//Struct untuk menyimpan data posisi
struct Position{
	int x;
	int y;
} ;

int main() {
  Position position;
  while (stopgame == false && Level == 0) {
    system("cls");
    
	//berfungsi untuk menampilkan map/peta dan hero nya
	for (int y = 0; y < 10; y++) {
      cout << Map[y] << endl;
    }
    
    
    for (position.y = 0; position.y < 10; position.y++) {
      for (position.x = 0; position.x < 10; position.x++) {
        switch (Map[position.y][position.x]) {
//        case '#': {
//          Map[y][x] = 219;
//        }
//        break;
        case '@': {

          if (GetAsyncKeyState(VK_UP) != 0) {
            up(position.y, position.x);
          }
          if (GetAsyncKeyState(VK_DOWN) != 0) {
            down(position.y, position.x);
          }
          if (GetAsyncKeyState(VK_RIGHT) != 0) {
            right(position.y, position.x);
          }
          if (GetAsyncKeyState(VK_LEFT) != 0) {
            left(position.y, position.x);
          }

        }
        break;
        }
      }
    }
    cout << "\n\nLevel : " << * levelPointer << "\n";
    Sleep(Gamespeed);
  }
  
  //Akan dieksekusi ketika game berhenti
  while (stopgame == false && Level == 1) {
    system("cls");
    cout << "Mission finished" << endl;
    system("pause");
    return EXIT_SUCCESS;
  }
  exit(1);
  getch();
}
